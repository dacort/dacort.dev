<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AWS on Damon Cortesi</title><link>https://dacort.dev/projects/aws/</link><description>Recent content in AWS on Damon Cortesi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dacort.dev/projects/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Blog Posts by Damon Cortesi</title><link>https://dacort.dev/projects/aws/blog-posts/</link><pubDate>Fri, 05 Jan 2024 08:58:00 -0700</pubDate><guid>https://dacort.dev/projects/aws/blog-posts/</guid><description>I&amp;rsquo;ve written or collaborated on many different blog posts while at AWS. This is a list of a few of them.
Easily query AWS service logs using Amazon Athena - One of the first tools I built at AWS, was a set of Glue scripts to parse, process, and convert AWS service logs for VPC Flow Logs, CloudTrail, AWS Load Balancers, CloudFront, and S3 Access Logs. Announcing Amazon EMR Serverless (Preview): - Launch post for a new serverless service for EMR.</description><content:encoded><![CDATA[<p>I&rsquo;ve written or collaborated on many different blog posts while at AWS. This is a list of a few of them.</p>
<ul>
<li><a href="https://aws.amazon.com/blogs/big-data/easily-query-aws-service-logs-using-amazon-athena/">Easily query AWS service logs using Amazon Athena</a> - One of the first tools I built at AWS, was a set of Glue scripts to parse, process, and convert AWS service logs for VPC Flow Logs, CloudTrail, AWS Load Balancers, CloudFront, and S3 Access Logs.</li>
<li><a href="https://aws.amazon.com/blogs/big-data/announcing-amazon-emr-serverless-preview-run-big-data-applications-without-managing-servers/">Announcing Amazon EMR Serverless (Preview):</a> - Launch post for a new serverless service for EMR.</li>
<li><a href="https://aws.amazon.com/blogs/big-data/build-deploy-and-run-spark-jobs-on-amazon-emr-with-the-open-source-emr-cli-tool/">Build, deploy, and run Spark jobs on Amazon EMR with the open-source EMR CLI tool</a> - Launch post for a tool I created to easily package, deploy, and run PySpark jobs across EMR on EC2 and EMR Serverless</li>
<li><a href="https://aws.amazon.com/blogs/big-data/use-amazon-emr-with-s3-access-grants-to-scale-spark-access-to-amazon-s3/">Use Amazon EMR with S3 Access Grants to scale Spark access to Amazon S3</a> - Launch post I wrote announcing a new across-team functionality for EMR.</li>
</ul>
]]></content:encoded></item><item><title>Developer Experience tools for Amazon EMR</title><link>https://dacort.dev/projects/aws/emr-tools/</link><pubDate>Fri, 05 Jan 2024 08:58:00 -0700</pubDate><guid>https://dacort.dev/projects/aws/emr-tools/</guid><description>As part of my role as a developer advocate, I&amp;rsquo;ve created several different open source tools or integrations to make working with Amazon EMR easier for data engineers and other data wranglers.
Amazon EMR CLI The EMR CLI is an open-source command-line interface that makes packaging, deploying, and running jobs across all EMR deployment models as simple as an emr run. The tool supports PySpark projects and automatically bundles the required dependencies in a consistent manner no matter whether you&amp;rsquo;re using EMR on EC2, EMR on EKS (coming soon), or EMR Serverless.</description><content:encoded><![CDATA[<p>As part of my role as a developer advocate, I&rsquo;ve created several different open source tools or integrations to make working with Amazon EMR easier for data engineers and other data wranglers.</p>
<h2 id="amazon-emr-cli">Amazon EMR CLI</h2>
<p>The <a href="https://github.com/awslabs/amazon-emr-cli">EMR CLI</a> is an open-source command-line interface that makes packaging, deploying, and running jobs across all EMR deployment models as simple as an <code>emr run</code>. The tool supports PySpark projects and automatically bundles the required dependencies in a consistent manner no matter whether you&rsquo;re using EMR on EC2, EMR on EKS (coming soon), or EMR Serverless. It also adds additional features like log-tailing, job monitoring, and bootstrapping of dev environments.</p>
<h2 id="amazon-emr-toolkit-for-vs-code">Amazon EMR Toolkit for VS Code</h2>
<p>I also built an <a href="https://marketplace.visualstudio.com/items?itemName=AmazonEMR.emr-tools">EMR extension for VS Code</a> that improves the feedback loop for Spark developers using EMR. Instead of having to test code on remote clusters, the extension allows you to create a local EMR environment where you can quickly iterate on changes before deploying the code to your test or production environments. It also allows you to manage your different EMR environments and includes a Glue Data Catalog viewer.</p>
<h2 id="emr-serverless-samples">EMR Serverless Samples</h2>
<p>To make it easier for folks to have production-ready examples of different code, deployment templates, and monitoring dashboards for EMR Serverless, I created the <a href="https://github.com/aws-samples/emr-serverless-samples">EMR Serverless Samples</a> repository. The repository is a central source of up-to-date references for folks using EMR Serverless.</p>
]]></content:encoded></item><item><title>Athena Glue Service Logs</title><link>https://dacort.dev/projects/aws/athena-glue-service-logs/</link><pubDate>Fri, 14 May 2021 15:23:33 -0700</pubDate><guid>https://dacort.dev/projects/aws/athena-glue-service-logs/</guid><description>Glue jobs and library to manage conversion of AWS Service Logs into Athena-friendly formats.</description><content:encoded><![CDATA[<p>AWS Service Logs come in all different formats. Ideally they could all be queried in place by Athena and, while some can, for cost and performance reasons it can be better to convert the logs into partitioned Parquet files.</p>
<p>The general approach is that for any given type of service log, we have Glue Jobs that can do the following:</p>
<ol>
<li>Create source tables in the Data Catalog</li>
<li>Create destination tables in the Data Catalog</li>
<li>Know how to convert the source data to partitioned, Parquet files</li>
<li>Maintain new partitions for both tables</li>
</ol>
<p>This library was created as part of my role as a Big Data Architect and is available at <a href="https://github.com/awslabs/athena-glue-service-logs">awslabs/athena-glue-service-logs</a>.</p>
]]></content:encoded></item><item><title>Athena SQLite ðŸ’¾</title><link>https://dacort.dev/projects/aws/athena-sqlite/</link><pubDate>Fri, 14 May 2021 15:23:33 -0700</pubDate><guid>https://dacort.dev/projects/aws/athena-sqlite/</guid><description>Athena SQLite is a project that allows you to query SQLite databases in S3 using Athena&amp;rsquo;s Federated Query functionality.
Install it from the Serverless Application Repository: AthenaSQLiteConnector.
Wait, what?! SQLite in S3? Yea! As quite possibly the most prevelant database in the world, it&amp;rsquo;s not unsual for me to have various SQLite files laying around.
This Athena data connector allows you to query those databases directly from Athena.
Cool! Right?! One of the fun things about this project is that SQLite is not intended to be a network database.</description><content:encoded><![CDATA[<p>Athena SQLite is a project that allows you to query SQLite databases in S3 using Athena&rsquo;s Federated Query functionality.</p>
<p>Install it from the Serverless Application Repository: <a href="https://serverlessrepo.aws.amazon.com/#/applications/arn:aws:serverlessrepo:us-east-1:689449560910:applications~AthenaSQLITEConnector">AthenaSQLiteConnector</a>.</p>
<h2 id="wait-what">Wait, what?!</h2>
<p>SQLite in S3? Yea! As quite possibly the most prevelant database in the world, it&rsquo;s not unsual for me to have various SQLite files laying around.</p>
<p>This Athena data connector allows you to query those databases directly from Athena.</p>
<h2 id="cool">Cool!</h2>
<p>Right?! One of the fun things about this project is that SQLite is <em>not</em> intended to be a network database.</p>
<p>So I implemented a custom <a href="https://rogerbinns.github.io/apsw/vfs.html">Virtual File System</a> for S3 that could be used by the Python SQLite wrapper, <a href="https://rogerbinns.github.io/apsw/">APSW</a>.</p>
<h2 id="source-code">Source Code</h2>
<p><a href="https://github.com/dacort/athena-sqlite/">dacort/athena-sqlite</a></p>
]]></content:encoded></item><item><title>Demo Code</title><link>https://dacort.dev/projects/aws/demo-code/</link><pubDate>Fri, 14 May 2021 15:23:33 -0700</pubDate><guid>https://dacort.dev/projects/aws/demo-code/</guid><description>Demo code I use during presentations.</description><content:encoded><![CDATA[<p>I&rsquo;m a fan of making the code I run in presentations publicly available.</p>
<p>Most of the demo code I use is available in my <a href="https://github.com/dacort/demo-code">demo-code</a> repository on GitHub. In there, you&rsquo;ll find such interesting things as:</p>
<ul>
<li>EMR CloudFormation Templates</li>
<li><a href="https://github.com/dacort/demo-code/tree/main/emr/eks">EMR on EKS notes</a></li>
<li><a href="https://github.com/dacort/demo-code/tree/main/emr/studio">EMR Studio notes</a></li>
<li>And even a <a href="https://github.com/dacort/demo-code/tree/main/cdk/big-data-stack">big data CDK stack</a> for easy deployment of my demos</li>
</ul>
]]></content:encoded></item></channel></rss>